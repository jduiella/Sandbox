{"version":3,"file":"generate-stubs.js","sourceRoot":"","sources":["../src/generate-stubs.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,oEAAwE;AAExE,SAAS,2BAA2B,CAAC,OAKpC;IACC,KAAK,MAAM,UAAU,IAAI,8BAAU,CAAC,eAAe,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;QAC7E,MAAM,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QAChF,MAAM,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QAEhF,IAAI,UAAU,CAAC,WAAW,EAAE,EAAE;YAC5B,4BAA4B;YAC5B,8BAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACzC,2BAA2B,CAAC;gBAC1B,gBAAgB,EAAE,UAAU;gBAC5B,gBAAgB,EAAE,UAAU;gBAC5B,4BAA4B,EAAE,OAAO,CAAC,4BAA4B,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG;gBAC1F,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;aAC3C,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACrC,8BAAU,CAAC,QAAQ,CAAC;oBAClB,UAAU,EAAE,UAAU;oBACtB,eAAe,EAAE,UAAU;iBAC5B,CAAC,CAAC;aACJ;iBAAM,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC1C,MAAM,aAAa,GAAW,OAAO,CAAC,4BAA4B,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;gBACtG,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBAC3F,MAAM,eAAe,GAAW,IAAI,CAAC,SAAS,CAAC,wBAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChF,MAAM,oBAAoB,GAAW,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;gBAEnE,8BAAU,CAAC,SAAS,CAClB,UAAU;gBACV,WAAW;gBACX,kHAAkH;gBAClH,4BAA4B,eAAe,iCAAiC,oBAAoB,IAAI,CACrG,CAAC;aACH;SACF;KACF;AACH,CAAC;AAED,kEAAkE;AAClE,SAAgB,GAAG;IACjB,MAAM,aAAa,GAAW,0BAAM,CAAC,cAAc,CAAC;QAClD,cAAc,EAAE,SAAS;QACzB,WAAW,EAAE,qBAAqB;KACnC,CAAC,CAAC;IAEH,MAAM,eAAe,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAClE,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,eAAe,CAAC,CAAC;IAC/E,2BAA2B,CAAC;QAC1B,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC;QACjD,gBAAgB,EAAE,eAAe;QACjC,4BAA4B,EAAE,EAAE;QAChC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC;KAC5D,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;AACzD,CAAC;AAfD,kBAeC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport { FileSystem, Import, Path } from '@rushstack/node-core-library';\n\nfunction generateLibFilesRecursively(options: {\n  parentSourcePath: string;\n  parentTargetPath: string;\n  parentSrcImportPathWithSlash: string;\n  libShimIndexPath: string;\n}): void {\n  for (const folderItem of FileSystem.readFolderItems(options.parentSourcePath)) {\n    const sourcePath: string = path.join(options.parentSourcePath, folderItem.name);\n    const targetPath: string = path.join(options.parentTargetPath, folderItem.name);\n\n    if (folderItem.isDirectory()) {\n      // create destination folder\n      FileSystem.ensureEmptyFolder(targetPath);\n      generateLibFilesRecursively({\n        parentSourcePath: sourcePath,\n        parentTargetPath: targetPath,\n        parentSrcImportPathWithSlash: options.parentSrcImportPathWithSlash + folderItem.name + '/',\n        libShimIndexPath: options.libShimIndexPath\n      });\n    } else {\n      if (folderItem.name.endsWith('.d.ts')) {\n        FileSystem.copyFile({\n          sourcePath: sourcePath,\n          destinationPath: targetPath\n        });\n      } else if (folderItem.name.endsWith('.js')) {\n        const srcImportPath: string = options.parentSrcImportPathWithSlash + path.parse(folderItem.name).name;\n        const shimPath: string = path.relative(options.parentTargetPath, options.libShimIndexPath);\n        const shimPathLiteral: string = JSON.stringify(Path.convertToSlashes(shimPath));\n        const srcImportPathLiteral: string = JSON.stringify(srcImportPath);\n\n        FileSystem.writeFile(\n          targetPath,\n          // Example:\n          // module.exports = require(\"../../../lib-shim/index\")._rushSdk_loadInternalModule(\"logic/policy/GitEmailPolicy\");\n          `module.exports = require(${shimPathLiteral})._rushSdk_loadInternalModule(${srcImportPathLiteral});`\n        );\n      }\n    }\n  }\n}\n\n// Entry point invoked by \"runScript\" action from config/heft.json\nexport function run(): void {\n  const rushLibFolder: string = Import.resolvePackage({\n    baseFolderPath: __dirname,\n    packageName: '@microsoft/rush-lib'\n  });\n\n  const stubsTargetPath: string = path.resolve(__dirname, '../lib');\n  console.log('generate-stubs: Generating stub files under: ' + stubsTargetPath);\n  generateLibFilesRecursively({\n    parentSourcePath: path.join(rushLibFolder, 'lib'),\n    parentTargetPath: stubsTargetPath,\n    parentSrcImportPathWithSlash: '',\n    libShimIndexPath: path.join(__dirname, '../lib-shim/index')\n  });\n  console.log('generate-stubs: Completed successfully.');\n}\n"]}