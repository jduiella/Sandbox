"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
function generateLibFilesRecursively(options) {
    for (const folderItem of node_core_library_1.FileSystem.readFolderItems(options.parentSourcePath)) {
        const sourcePath = path.join(options.parentSourcePath, folderItem.name);
        const targetPath = path.join(options.parentTargetPath, folderItem.name);
        if (folderItem.isDirectory()) {
            // create destination folder
            node_core_library_1.FileSystem.ensureEmptyFolder(targetPath);
            generateLibFilesRecursively({
                parentSourcePath: sourcePath,
                parentTargetPath: targetPath,
                parentSrcImportPathWithSlash: options.parentSrcImportPathWithSlash + folderItem.name + '/',
                libShimIndexPath: options.libShimIndexPath
            });
        }
        else {
            if (folderItem.name.endsWith('.d.ts')) {
                node_core_library_1.FileSystem.copyFile({
                    sourcePath: sourcePath,
                    destinationPath: targetPath
                });
            }
            else if (folderItem.name.endsWith('.js')) {
                const srcImportPath = options.parentSrcImportPathWithSlash + path.parse(folderItem.name).name;
                const shimPath = path.relative(options.parentTargetPath, options.libShimIndexPath);
                const shimPathLiteral = JSON.stringify(node_core_library_1.Path.convertToSlashes(shimPath));
                const srcImportPathLiteral = JSON.stringify(srcImportPath);
                node_core_library_1.FileSystem.writeFile(targetPath, 
                // Example:
                // module.exports = require("../../../lib-shim/index")._rushSdk_loadInternalModule("logic/policy/GitEmailPolicy");
                `module.exports = require(${shimPathLiteral})._rushSdk_loadInternalModule(${srcImportPathLiteral});`);
            }
        }
    }
}
// Entry point invoked by "runScript" action from config/heft.json
function run() {
    const rushLibFolder = node_core_library_1.Import.resolvePackage({
        baseFolderPath: __dirname,
        packageName: '@microsoft/rush-lib'
    });
    const stubsTargetPath = path.resolve(__dirname, '../lib');
    console.log('generate-stubs: Generating stub files under: ' + stubsTargetPath);
    generateLibFilesRecursively({
        parentSourcePath: path.join(rushLibFolder, 'lib'),
        parentTargetPath: stubsTargetPath,
        parentSrcImportPathWithSlash: '',
        libShimIndexPath: path.join(__dirname, '../lib-shim/index')
    });
    console.log('generate-stubs: Completed successfully.');
}
exports.run = run;
//# sourceMappingURL=generate-stubs.js.map